using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Linq;

namespace Arctron.Obj2Gltf.WaveFront
{
    public class ObjModel
    {
        public string MatFilename { get; set; }

        public List<Vec3> Vertices { get; set; } = new List<Vec3>();

        public List<Vec3> Normals { get; set; } = new List<Vec3>();

        public List<Vec2> Uvs { get; set; } = new List<Vec2>();

        public List<Geometry> Geometries { get; set; } = new List<Geometry>();

        public List<Material> Materials { get; set; } = new List<Material>();

        public void Write(StreamWriter writer)
        {
            writer.WriteLine("# File generated by Arctron BIMClient");
            if (!String.IsNullOrEmpty(MatFilename))
            {
                writer.WriteLine($"mtllib {MatFilename}");
            }
            //if (Log != null)
            //{
            //    Log.TraceInformation("开始导出顶点数据...");
            //}
            var vs = String.Join(Environment.NewLine, Vertices.Select(v => $"v {v.X / 1000} {v.Z / 1000} {-v.Y / 1000}"));
            writer.WriteLine(vs);
            writer.Flush();
            //if (Log != null)
            //{
            //    Log.TraceInformation("结束导出顶点数据...");
            //}
            //if (Log != null)
            //{
            //    Log.TraceInformation("开始导出纹理坐标数据...");
            //}
            var ts = String.Join(Environment.NewLine, Uvs.Select(t => $"vt {t.U} {t.V}"));
            writer.WriteLine(ts);
            writer.Flush();
            //if (Log != null)
            //{
            //    Log.TraceInformation("结束导出纹理坐标数据...");
            //}
            //if (Log != null)
            //{
            //    Log.TraceInformation("开始导出坐标法向数据...");
            //}
            var ns = String.Join(Environment.NewLine, Normals.Select(n => $"vn {n.X} {n.Z} {-n.Y}"));
            writer.WriteLine(ns);
            writer.Flush();
            //if (Log != null)
            //{
            //    Log.TraceInformation("结束导出坐标法向数据...");
            //}
            //if (Log != null)
            //{
            //    Log.TraceInformation("开始导出面信息...");
            //}
            foreach (var g in Geometries)
            {
                g.Write(writer);
            }
            //if (Log != null)
            //{
            //    Log.TraceInformation("结束导出面信息...");
            //}
        }
    }
    // http://paulbourke.net/dataformats/obj/
    // http://www.fileformat.info/format/wavefrontobj/egff.htm
    public class Geometry
    {
        public string Id { get; set; }
        public List<Face> Faces { get; set; } = new List<Face>();

        public void Write(StreamWriter writer)
        {
            writer.WriteLine($"g {Id}");
            writer.WriteLine($"s off");
            foreach (var f in Faces)
            {                
                f.Write(writer);
            }
        }
    }
}
