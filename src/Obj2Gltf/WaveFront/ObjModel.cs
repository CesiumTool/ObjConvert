using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Linq;

namespace Arctron.Obj2Gltf.WaveFront
{
    /// <summary>
    ///  represents an obj file model
    /// </summary>
    public class ObjModel
    {
        /// <summary>
        /// obj used mat file path
        /// </summary>
        public string MatFilename { get; set; }
        /// <summary>
        /// vertices coordinates list
        /// </summary>
        public List<Vec3> Vertices { get; set; } = new List<Vec3>();
        /// <summary>
        /// vertices normal list
        /// </summary>
        public List<Vec3> Normals { get; set; } = new List<Vec3>();
        /// <summary>
        /// vertices texture coordinates list
        /// </summary>
        public List<Vec2> Uvs { get; set; } = new List<Vec2>();
        /// <summary>
        /// grouped geometries
        /// </summary>
        public List<Geometry> Geometries { get; set; } = new List<Geometry>();
        /// <summary>
        /// mat list from mat file
        /// </summary>
        public List<Material> Materials { get; set; } = new List<Material>();
        /// <summary>
        /// write obj file
        /// </summary>
        /// <param name="writer"></param>
        public void Write(StreamWriter writer)
        {
            writer.WriteLine("# File generated by Arctron BIMClient");
            if (!String.IsNullOrEmpty(MatFilename))
            {
                writer.WriteLine($"mtllib {MatFilename}");
            }
            var vs = String.Join(Environment.NewLine, Vertices.Select(v => $"v {v.X / 1000} {v.Z / 1000} {-v.Y / 1000}"));
            writer.WriteLine(vs);
            writer.Flush();
            var ts = String.Join(Environment.NewLine, Uvs.Select(t => $"vt {t.U} {t.V}"));
            writer.WriteLine(ts);
            writer.Flush();
            var ns = String.Join(Environment.NewLine, Normals.Select(n => $"vn {n.X} {n.Z} {-n.Y}"));
            writer.WriteLine(ns);
            writer.Flush();
            foreach (var g in Geometries)
            {
                g.Write(writer);
            }
        }
    }

    /// <summary>
    /// geometry with face meshes
    /// http://paulbourke.net/dataformats/obj/
    /// http://www.fileformat.info/format/wavefrontobj/egff.htm
    /// </summary>
    public class Geometry
    {
        /// <summary>
        /// group name
        /// </summary>
        public string Id { get; set; }
        /// <summary>
        /// meshes
        /// </summary>
        public List<Face> Faces { get; set; } = new List<Face>();
        /// <summary>
        /// write geometry
        /// </summary>
        /// <param name="writer"></param>
        public void Write(StreamWriter writer)
        {
            writer.WriteLine($"g {Id}");
            writer.WriteLine($"s off");
            foreach (var f in Faces)
            {                
                f.Write(writer);
            }
        }
    }
}
